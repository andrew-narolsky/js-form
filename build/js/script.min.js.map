{"version":3,"sources":["form.js","script.js"],"names":["Form","options","this","container","clickSubmitButton","prototype","getFields","fields","_this","addEventListener","event","preventDefault","validateForm","submitForm","clearErrors","clearFormInputs","validateEmail","email","test","String","toLowerCase","contactUsForm","ContactUsForm","apply","arguments","Object","create","constructor","querySelector","password","checkbox","checked","value","trim","field","closest","classList","add","innerText","remove","document"],"mappings":"aAIA,SAASA,KAAKC,GACVC,KAAKC,UAAYF,EAAQE,UACzBD,KAAKE,oBAGTJ,KAAKK,UAAUC,UAAY,WACvB,OAAOJ,KAAKK,OAAS,IAGzBP,KAAKK,UAAUD,kBAAoB,WAAW,IAAAI,EAAAN,KAC1CA,KAAKC,UAAUM,iBAAiB,SAAU,SAACC,GACvCA,EAAMC,iBACFH,EAAKI,gBACLJ,EAAKK,gBAKjBb,KAAKK,UAAUO,aAAe,WAC1BV,KAAKY,cACLZ,KAAKI,aAGTN,KAAKK,UAAUQ,WAAa,WACxBX,KAAKI,aAGTN,KAAKK,UAAUU,gBAAkB,aAEjCf,KAAKK,UAAUS,YAAc,WACzBZ,KAAKI,aAGTN,KAAKK,UAAUW,cAAgB,SAASC,GAEpC,MADS,0JACCC,KAAKC,OAAOF,GAAOG,gBCvCjC,IA0DUC,cA1DJC,cAAgB,SAASrB,GAC3BD,KAAKuB,MAAMrB,KAAMsB,YAGrBF,cAAcjB,UAAYoB,OAAOC,OAAO1B,KAAKK,YAC7CiB,cAAcjB,UAAUsB,YAAcL,eAExBjB,UAAUC,UAAY,WAChCJ,KAAKK,OAAS,CACVU,MAAOf,KAAKC,UAAUyB,cAAc,qBACpCC,SAAU3B,KAAKC,UAAUyB,cAAc,wBACvCE,SAAU5B,KAAKC,UAAUyB,cAAc,0BAI/CN,cAAcjB,UAAUD,kBAAoB,WACxCJ,KAAKK,UAAUD,kBAAkBmB,MAAMrB,KAAMsB,YAGjDF,cAAcjB,UAAUO,aAAe,WAEnC,GADAZ,KAAKK,UAAUO,aAAaW,MAAMrB,KAAMsB,WACnCtB,KAAKK,OAAOuB,SAASC,SAAY7B,KAAKK,OAAOU,MAAMe,MAAMC,QAAW/B,KAAKK,OAAOsB,SAASG,MAAMC,QAAW/B,KAAKc,cAAcd,KAAKK,OAAOU,MAAMe,MAAMC,QAY1J,OAAO,EAXH,IAAK,IAAIC,KAAShC,KAAKK,OACdL,KAAKK,OAAO2B,GAAOF,MAAMC,QAAW/B,KAAKK,OAAOuB,SAASC,QAGzC,UAAVG,GAAqBhC,KAAKK,OAAO2B,GAAOF,MAAMC,SAAW/B,KAAKc,cAAcd,KAAKK,OAAO2B,GAAOF,MAAMC,UAC5G/B,KAAKK,OAAO2B,GAAOC,QAAQ,eAAeC,UAAUC,IAAI,SACxDnC,KAAKK,OAAO2B,GAAOC,QAAQ,eAAeP,cAAc,kBAAkBU,UAAY,2BAJtFpC,KAAKK,OAAO2B,GAAOC,QAAQ,eAAeC,UAAUC,IAAI,SACxDnC,KAAKK,OAAO2B,GAAOC,QAAQ,eAAeP,cAAc,kBAAkBU,UAAY,aAAeJ,EAAQ,gBAMrH,OAAO,GAKfZ,cAAcjB,UAAUQ,WAAa,WACjCb,KAAKK,UAAUQ,WAAWU,MAAMrB,KAAMsB,WACtCtB,KAAKY,cACLZ,KAAKa,mBAGTO,cAAcjB,UAAUU,gBAAkB,WACtC,IAAK,IAAImB,KAAShC,KAAKK,OACnBL,KAAKK,OAAO2B,GAAOF,MAAQ,GAE/B9B,KAAKK,OAAOuB,SAASC,SAAU,GAGnCT,cAAcjB,UAAUS,YAAc,WAElC,IAAK,IAAIoB,KADTlC,KAAKK,UAAUS,YAAYS,MAAMrB,KAAMsB,WACrBtB,KAAKK,OACnBL,KAAKK,OAAO2B,GAAOC,QAAQ,eAAeC,UAAUG,OAAO,SAC3DrC,KAAKK,OAAO2B,GAAOC,QAAQ,eAAeP,cAAc,kBAAkBU,UAAY,IAI1FE,SAASZ,cAAc,UACjBP,cAAgB,IAAIC,cAAc,CACpCnB,UAAWqC,SAASZ,cAAc","file":"script.min.js","sourcesContent":["/**\n * Form\n **/\n\nfunction Form(options) {\n    this.container = options.container;\n    this.clickSubmitButton();\n}\n\nForm.prototype.getFields = function() {\n    return this.fields = {}\n}\n\nForm.prototype.clickSubmitButton = function() {\n    this.container.addEventListener('submit', (event) => {\n        event.preventDefault();\n        if (this.validateForm()) {\n            this.submitForm();\n        }\n    });\n}\n\nForm.prototype.validateForm = function() {\n    this.clearErrors();\n    this.getFields();\n}\n\nForm.prototype.submitForm = function() {\n    this.getFields();\n}\n\nForm.prototype.clearFormInputs = function() {}\n\nForm.prototype.clearErrors = function() {\n    this.getFields();\n}\n\nForm.prototype.validateEmail = function(email) {\n    let re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n}\n","const ContactUsForm = function(options) {\n    Form.apply(this, arguments);\n}\n\nContactUsForm.prototype = Object.create(Form.prototype);\nContactUsForm.prototype.constructor = ContactUsForm;\n\nContactUsForm.prototype.getFields = function() {\n    this.fields = {\n        email: this.container.querySelector('input[name=email]'),\n        password: this.container.querySelector('input[name=password]'),\n        checkbox: this.container.querySelector('input[name=checkbox]')\n    }\n}\n\nContactUsForm.prototype.clickSubmitButton = function() {\n    Form.prototype.clickSubmitButton.apply(this, arguments);\n}\n\nContactUsForm.prototype.validateForm = function() {\n    Form.prototype.validateForm.apply(this, arguments);\n    if (!this.fields.checkbox.checked || !this.fields.email.value.trim() || !this.fields.password.value.trim() || !this.validateEmail(this.fields.email.value.trim())) {\n        for (let field in this.fields) {\n            if (!this.fields[field].value.trim() || !this.fields.checkbox.checked) {\n                this.fields[field].closest('.form-group').classList.add('error');\n                this.fields[field].closest('.form-group').querySelector('.error-message').innerText = 'The field ' + field + ' is required';\n            } else if (field === 'email' && this.fields[field].value.trim() && !this.validateEmail(this.fields[field].value.trim())) {\n                this.fields[field].closest('.form-group').classList.add('error');\n                this.fields[field].closest('.form-group').querySelector('.error-message').innerText = 'The email is incorrect';\n            }\n        }\n        return false;\n    }\n    return true;\n}\n\nContactUsForm.prototype.submitForm = function() {\n    Form.prototype.submitForm.apply(this, arguments);\n    this.clearErrors();\n    this.clearFormInputs();\n}\n\nContactUsForm.prototype.clearFormInputs = function() {\n    for (let field in this.fields) {\n        this.fields[field].value = '';\n    }\n    this.fields.checkbox.checked = false;\n}\n\nContactUsForm.prototype.clearErrors = function() {\n    Form.prototype.clearErrors.apply(this, arguments);\n    for (let field in this.fields) {\n        this.fields[field].closest('.form-group').classList.remove('error');\n        this.fields[field].closest('.form-group').querySelector('.error-message').innerText = '';\n    }\n}\n\nif (document.querySelector('form')) {\n    const contactUsForm = new ContactUsForm({\n        container: document.querySelector('form'),\n    });\n}\n"]}